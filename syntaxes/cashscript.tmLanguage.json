{
  "scopeName": "source.cash",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#control"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#number"
    },
    {
      "include": "#string"
    },
    {
      "include": "#type"
    },
    {
      "include": "#global"
    },
    {
      "include": "#declaration"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#members"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "include": "#comment-line"
        },
        {
          "include": "#comment-block"
        }
      ]
    },
    "comment-line": {
      "match": "(?<!tp:)//.*?$",
      "name": "comment.line.cashscript"
    },
    "comment-block": {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block.cashscript"
    },
    "operator": {
      "patterns": [
        {
          "include": "#operator-logic-assignment"
        },
        {
          "include": "#operator-mapping"
        },
        {
          "include": "#operator-arithmetic"
        },
        {
          "include": "#operator-binary"
        }
      ]
    },
    "operator-logic-assignment": {
      "match": "(&&|\\|\\||[<>!=]=?|\\+\\+|--)",
      "name": "keyword.operator.logic_assignment.cashscript"
    },
    "operator-arithmetic": {
      "match": "(\\+|\\-|\/|%|\\*)",
      "name": "keyword.operator.arithmetic.cashscript"
    },
    "operator-binary": {
      "match": "(\\^|\\&|\\|)",
      "name": "keyword.operator.binary.cashscript"
    },
    "control": {
      "patterns": [
        {
          "include": "#control-flow"
        },
        {
          "include": "#control-pragma"
        },
        {
          "include": "#control-other"
        },
        {
          "include": "#control-this"
        },
        {
          "include": "#control-modifier"
        }
      ]
    },
    "control-flow": {
      "match": "\\b(if|else|require)\\b",
      "name": "keyword.control.flow.cashscript"
    },
    "control-pragma": {
      "match": "\\b(pragma)(?:\\s+([A-Za-z_]\\w+)\\s+([^\\s]+))?\\b",
      "captures": {
        "1": {
          "name": "keyword.control.pragma.cashscript"
        },
        "2": {
          "name": "entity.name.tag.pragma.cashscript"
        },
        "3": {
          "name": "constant.other.pragma.cashscript"
        }
      }
    },
    "control-other": {
      "match": "\\b(new)\\b",
      "name": "keyword.control.cashscript"
    },
    "control-this": {
      "match": "\\b(this)\\b",
      "name": "variable.language.transaction.cashscript"
    },
    "control-modifier": {
      "match": "\\b(constant)\\b",
      "name": "constant.language.modifer"
    },
    "constant": {
      "patterns": [
        {
          "include": "#constant-boolean"
        },
        {
          "include": "#constant-time"
        },
        {
          "include": "#constant-currency"
        }
      ]
    },
    "constant-boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean.cashscript"
    },
    "constant-time": {
      "match": "\\b(seconds|minutes|hours|days|weeks)\\b",
      "name": "constant.language.time.cashscript"
    },
    "constant-currency": {
      "match": "\\b(satoshis|sats|finney|bits|bitcoin)\\b",
      "name": "constant.language.currency.cashscript"
    },
    "number": {
      "patterns": [
        {
          "include": "#number-decimal"
        },
        {
          "include": "#number-hex"
        }
      ]
    },
    "number-decimal": {
      "match": "\\b([0-9]+(_[0-9]+)*([eE][0-9]+(_[0-9]+)*)?)\\b",
      "name": "constant.numeric.decimal.cashscript"
    },
    "number-hex": {
      "match": "\\b(0[xX][a-fA-F0-9]*)\\b",
      "name": "constant.numeric.hexadecimal.cashscript"
    },
    "string": {
      "patterns": [
        {
          "match": "\\\".*?\\\"",
          "name": "string.quoted.double.cashscript"
        },
        {
          "match": "\\'.*?\\'",
          "name": "string.quoted.single.cashscript"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "include": "#type-primitive"
        }
      ]
    },
    "type-primitive": {
      "match": "\\b(int|bool|string|pubkey|sig|datasig|byte|bytes\\d*)\\b",
      "name": "support.type.primitive.cashscript"
    },
    "global": {
      "patterns": [
        {
          "include": "#global-variables"
        },
        {
          "include": "#global-functions"
        }
      ]
    },
    "global-variables": {
      "patterns": [
        {
          "match": "\\b(tx)(?:.(version|locktime|inputs|outputs))?\\b",
          "captures": {
            "1": {
              "name": "variable.language.transaction.cashscript"
            },
            "2": {
              "name": "variable.parameter.transaction.cashscript"
            },
            "3": {
              "name": "invalid.illegal"
            }
          }
        }
      ]
    },
    "members": {
      "patterns": [
        {
          "match": "\\b(length)\\b",
          "name": "support.type.property.cashscript"
        },
        {
          "match": "\\b(split|reverse|slice|log)\\b",
          "name": "support.function.members.cashscript"
        }
      ]
    },
    "global-functions": {
      "patterns": [
        {
          "match": "\\b(require)\\b",
          "name": "keyword.control.exceptions.cashscript"
        },
        {
          "match": "\\b(abs|min|max|within)\\b",
          "name": "entity.name.function.math.cashscript"
        },
        {
          "match": "\\b(ripemd160|sha1|sha256|hash160|hash256)\\b",
          "name": "entity.name.function.hashing.cashscript"
        },
        {
          "match": "\\b(checkSig|checkMultiSig|checkDataSig)\\b",
          "name": "entity.name.function.checking.cashscript"
        },
        {
          "match": "\\b(date)\\b",
          "name": "entity.name.function.utility.cashscript"
        },
        {
          "match": "\\b(LockingBytecodeP2PKH|LockingBytecodeP2SH20|LockingBytecodeP2SH32|LockingBytecodeNullData)\\b",
          "name": "entity.name.function.declaration.cashscript"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#declaration-contract"
        },
        {
          "include": "#declaration-function"
        }
      ]
    },
    "declaration-contract": {
      "patterns": [
        {
          "match": "\\b(contract)(\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.contract.cashscript"
            },
            "3": {
              "name": "entity.name.type.contract.cashscript"
            }
          }
        }
      ]
    },
    "declaration-function": {
      "patterns": [
        {
          "match": "\\b(function)\\s+([A-Za-z_]\\w*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.function.cashscript"
            },
            "2": {
              "name": "entity.name.function.cashscript"
            }
          }
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "match": ";",
          "name": "punctuation.terminator.statement.cashscript"
        },
        {
          "match": "\\.",
          "name": "punctuation.accessor.cashscript"
        },
        {
          "match": ",",
          "name": "punctuation.separator.cashscript"
        }
      ]
    }
  }
}
